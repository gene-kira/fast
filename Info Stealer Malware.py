import os
import hashlib
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import yaml
import requests
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import shutil
import pickle
import math
import collections

# Install necessary libraries if not already installed
def install_libraries():
    required_libraries = ['pandas', 'scikit-learn', 'pyyaml', 'requests', 'watchdog']
    for library in required_libraries:
        try:
            __import__(library)
        except ImportError:
            os.system(f"pip install {library}")

# Load configuration from config.yaml
def load_config(config_file='config.yaml'):
    with open(config_file, 'r') as file:
        config = yaml.safe_load(file)
    return config

# Generate a hash of the file for comparison
def hash_file(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

# Check against VirusTotal
def check_virus_total(hash, api_key):
    url = f"https://www.virustotal.com/api/v3/files/{hash}"
    headers = {
        "x-apikey": api_key
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        if data['data']['attributes']['last_analysis_stats']['malicious'] > 0:
            return True
    return False

# Train the machine learning model
def train_model(data_file):
    data = pd.read_csv(data_file)
    X = data.drop('label', axis=1)
    y = data['label']
    
    model = RandomForestClassifier(n_estimators=100)
    model.fit(X, y)
    return model

def extract_features(file_path):
    features = {}
    with open(file_path, 'rb') as f:
        file_content = f.read()
    features['file_size'] = len(file_content)
    features['entropy'] = -sum((count / len(file_content)) * math.log2(count / len(file_content)) for count in collections.Counter(file_content).values())
    
    # Additional static analysis features can be added here
    return features

def load_model(model_file='model.pkl'):
    if not os.path.exists(model_file):
        print("Training new model...")
        model = train_model('data.csv')
        with open(model_file, 'wb') as f:
            pickle.dump(model, f)
    else:
        with open(model_file, 'rb') as f:
            model = pickle.load(f)
    return model

# Define the File Monitoring System
class FileMonitor(FileSystemEventHandler):
    def __init__(self, config, model):
        self.config = config
        self.model = model
        self.quarantine_path = self.config['paths']['quarantine_path']
    
    def on_modified(self, event):
        if not event.is_directory:
            self.process_file(event.src_path)
    
    def on_created(self, event):
        if not event.is_directory:
            self.process_file(event.src_path)
    
    def process_file(self, file_path):
        try:
            file_hash = hash_file(file_path)
            is_malicious = check_virus_total(file_hash, self.config['api_keys']['virus_total'])
            
            if not is_malicious:
                features = extract_features(file_path)
                X = pd.DataFrame([features])
                prediction = self.model.predict(X)[0]
                is_malicious = bool(prediction)
                
            if is_malicious:
                self.quarantine_file(file_path, file_hash)
        except Exception as e:
            print(f"Error processing {file_path}: {e}")
    
    def quarantine_file(self, file_path, file_hash):
        try:
            quarantine_dir = os.path.join(self.quarantine_path, file_hash[:2])
            if not os.path.exists(quarantine_dir):
                os.makedirs(quarantine_dir)
            new_path = os.path.join(quarantine_dir, f"{file_hash}.quarantined")
            shutil.move(file_path, new_path)
            print(f"Quarantined {file_path} to {new_path}")
        except Exception as e:
            print(f"Error quarantining {file_path}: {e}")

# Main script
def main():
    install_libraries()
    
    # Load configuration
    config = load_config()
    
    # Train or load the model
    if not os.path.exists('model.pkl'):
        print("Training new model...")
        model = train_model('data.csv')
        with open('model.pkl', 'wb') as f:
            pickle.dump(model, f)
    else:
        model = load_model()
    
    # Initialize file monitoring
    observer = Observer()
    event_handler = FileMonitor(config, model)
    watch_path = config['paths']['watch_path']
    observer.schedule(event_handler, path=watch_path, recursive=True)
    observer.start()
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    main()
